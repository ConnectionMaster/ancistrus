#!/bin/sh
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#   Copyright (C) 2012-2019
#       Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#       Eric Luehrsen
#
#   Copyright (C) 2017-2018 Tony Ambardar
#
# Revised & adapted:
#
# ancistrus
#
# Netgear's D7000 (V1) Nighthawk Router Experience Distributed Project
#
# https://github.com/negan07/ancistrus
#
# License: GPLv2
#
#
# Startup rc for qos-sqm
#
# Usage: $0 < start restart startforced restartforced stop details stats reset help > (< debug >) (< verbose >)
#

path_binaries() {
# Paths & binaries
[ -z "$LIBDIR" ] && LIBDIR=/lib/modules
[ -z "$ETCDIR" ] && ETCDIR=/usr/etc
[ -z "$BINDIR" ] && BINDIR=/usr/sbin
[ -z "$SCRIPTSDIR" ] && SCRIPTSDIR=${BINDIR}/scripts

# Debug purpose
#LIBDIR=/tmp/etc/ancdbg
#ETCDIR=/tmp/etc/ancdbg
#BINDIR=/tmp/etc/ancdbg
#SCRIPTSDIR=/tmp/etc/ancdbg

[ -z "$INSMOD" ] && INSMOD=insmod
[ -z "$RMMOD" ] && RMMOD=rmmod
[ -z "$TC" ] && TC=tc_wrapper
[ -z "$IP" ] && IP=ip_wrapper
[ -z "$TC_BINARY" ] && TC_BINARY=${BINDIR}/tc
[ -z "$IP_BINARY" ] && IP_BINARY=${BINDIR}/ip
[ -z "$IPTABLES" ] && IPTABLES=iptables_wrapper
[ -z "$IP6TABLES" ] && IP6TABLES=ip6tables_wrapper
[ -z "$IPTABLES_BINARY" ] && IPTABLES_BINARY=${BINDIR}/iptables
[ -z "$IP6TABLES_BINARY" ] && IP6TABLES_BINARY=${BINDIR}/ip6tables
[ -z "$RUNLOCK" ] && RUNLOCK=/tmp/var/lock/qos-sqm.lock
[ -z "$STATE_FILE" ] && STATE_FILE=/tmp/qos.state
[ "$SQM_DEBUG" = "1" ] && QOS_LOG=/tmp/qosdebug.log
}

get_settings() {
# CONF
. ${ETCDIR}/qos-sqm.conf

# VARS SET
set -- $VARNAMEDEFS
for SET in $SQM_VARS
do
eval "$SET=`${BINDIR}/anc nvram drget $1 $2`"
shift 2
done

# Convert ul/dw rate values from mbps to kbps to mantain compatibility
[ "${UP_RATE_UNIT}" = "Mbps" ] && UPLINK=$(( ${UPLINK} * 1000 )) && UP_RATE_UNIT="Kbps"
[ "${DW_RATE_UNIT}" = "Mbps" ] && DOWNLINK=$(( ${DOWNLINK} * 1000 )) && DW_RATE_UNIT="Kbps"

# These are the modules that undo_modules() will attempt to unload
[ -z "$ALL_UNDO_MODULES" ] && ALL_UNDO_MODULES="sch_$SHAPER cls_flow sch_$QDISC act_ipt sc_track_ftp sc_priority"

# These are the modules that do_modules() will attempt to load
[ -z "$ALL_MODULES" ] && ALL_MODULES="act_ipt sch_$QDISC cls_flow sch_$SHAPER"

# Can be overridden by callers that want to silence error output for a particular command
[ -z "$SILENT" ] && SILENT=0
}

logging_setup() {
# Logging verbosity
VERBOSITY_SILENT=0
VERBOSITY_ERROR=1
VERBOSITY_WARNING=2
VERBOSITY_INFO=5
VERBOSITY_DEBUG=8
VERBOSITY_TRACE=10
[ -z "$SQM_VERBOSITY_MAX" ] && SQM_VERBOSITY_MAX=$VERBOSITY_INFO
# For silencing only errors
[ -z "$SQM_VERBOSITY_MIN" ] && SQM_VERBOSITY_MIN=$VERBOSITY_SILENT

[ -z "$SQM_DEBUG" ] && SQM_DEBUG=0
if [ "$SQM_DEBUG" -eq "1" ]
then
    SQM_DEBUG_LOG=${QOS_LOG}
    OUTPUT_TARGET=${SQM_DEBUG_LOG}
else
    OUTPUT_TARGET="/dev/null"
fi
}

release_lock() {
PID=$(cat "${RUNLOCK}/pid")
	if [ "${PID}" -ne "$$" ]; then
	sqm_error "Trying to release lock with wrong PID ${PID} != $$"
	return 1
	fi
rm -rf "${RUNLOCK}"
return 0
}

take_lock() {
	if mkdir "${RUNLOCK}" 2>/dev/null; then
	sqm_trace "Acquired run lock ( pid: $$ )"
	echo $$ >"${RUNLOCK}/pid"
	trap release_lock 0
	return 0
	fi
sqm_warn "Unable to get run lock - already held by `cat "${RUNLOCK}/pid"`"
return 1
}

# take lock to protect against concurrent runs
run_lock() {
local MAX_TRIES
local TRIES

MAX_TRIES=15
TRIES=0
	while ! take_lock
	do
	sleep 1
	let TRIES++
		if [ "${TRIES}" -eq "${MAX_TRIES}" ]; then
		sqm_error "Giving up on getting lock after ${MAX_TRIES} attempts"
		sqm_error "This is a bug: please issue report it"
		sqm_error "To re-enable qos-sqm, type: rm -r ${RUNLOCK}"
		exit 1
		fi
	done
}

stop_sqm() {

# allow passing in the IFACE as first command line argument
[ -n "$IFACE" ] || exit 1

sqm_trace; sqm_trace "$(date): Stopping." # Add some space and a date stamp to verbose log output and log files to separate runs
sqm_log "Stopping SQM on ${IFACE}"

# make sure to delete the ifb associated with the current interface only
CUR_IFB=$( get_ifb_associated_with_if ${IFACE} )
[ -z "$CUR_IFB" ] && CUR_IFB=$( ifb_name ${IFACE} )

if [ -n "${SCRIPT}" ]; then
    if [ -f "${SCRIPTSDIR}/${SCRIPT}" -a "${SCRIPT%.sqm}" != "$SCRIPT" ]; then
        sqm_debug "Using custom SQM script: ${SCRIPT}"
        . "${SCRIPTSDIR}/${SCRIPT}"
    elif is_legacy_script "${SCRIPT}"; then
        sqm_warn "Legacy script ${SCRIPT} is deprecated and should not be used."
        sqm_warn "Using built-in sqm_stop() to shut down SQM"
    else
        sqm_error "Custom SQM script ${SCRIPT} not found or unsupported!"
        sqm_warn "Using built-in code script to shut down SQM"
    fi
fi

sqm_stop
rm -f "${STATE_FILE}" && sqm_log "SQM was stopped on ${IFACE} successfully"

return 0
}

start_sqm() {

[ -n "$IFACE" ] || exit 1

if [ -f "${STATE_FILE}" ]; then
    sqm_error "SQM already activated on ${IFACE}."
    exit 1
fi

# in case of spurious hotplug events, try double check whether the interface is really up
if [ ! -d /sys/class/net/${IFACE} ] ; then
    sqm_error "${IFACE} does currently not exist, not even trying to start SQM on nothing."
    exit 1
fi

sqm_trace; sqm_trace "$(date): Starting." # Add some space and a date stamp to verbose log output and log files to separate runs
sqm_log "Starting SQM on ${IFACE}, in: ${DOWNLINK} Kbps, out: ${UPLINK} Kbps"

if [ -n "${SCRIPT}" ]; then
    if [ -f "${SCRIPTSDIR}/${SCRIPT}" -a "${SCRIPT%.sqm}" != "$SCRIPT" ]; then
        sqm_debug "Using custom SQM script: ${SCRIPT}"
        . "${SCRIPTSDIR}/${SCRIPT}"
    elif is_legacy_script "${SCRIPT}"; then
        # Emulate the old scripts but warn about usage
        legacy_script_emulate ${SCRIPT}
    else
        sqm_error "Custom SQM script ${SCRIPT} not found or unsupported!"
        sqm_warn "Using built-in script code"
    fi
fi

sqm_start && write_state_file ${STATE_FILE} ${SQM_VARS} && sqm_log "SQM was started on ${IFACE} successfully"

return 0
}

show_sqm() {
local INGR
local INGRLNK

INGR=$( ifb_name ${IFACE} )
INGRLNK=$( $IP_BINARY link | grep ${INGR} )
[ -z "$1" ] && {
S="-d"
} || {
S="-s"
V="-v"
}

    for I in qdisc class filter
    do
    echo
    echo "---- $I ----"
        [ "${UPLINK}" -eq 0 ] || {
        echo "--- EGRESS ---"
        $TC_BINARY $S $I show dev ${IFACE}
	}
        [ "${DOWNLINK}" -eq 0 ] || [ -z "${INGRLNK}" ] || {
        echo "--- INGRESS ---"
        $TC_BINARY $S $I show dev ${INGR}
        }
    done
echo
echo "--- MANGLE ---"
$IPTABLES_BINARY -t mangle -nL $V
[ "$IP6MODE" != "disable" ] && $IP6TABLES_BINARY -t mangle -nL $V

return 0
}

reset() {
# Stop qos-sqm
stop_sqm >/dev/null 2>&1

# Set original qos default vars (enable, uplink, uplink rate unit)
set -- $VARNAMEDEFS
for V in 1 2 3
do
anc nvram set $1 $2
shift 2
done

# Unset other qos vars
for V in "$@"
do
[ "`echo $V | head -c 4`" = "qos_" ] && anc nvram unset $V
done

# Commit vars
nvram commit
}

splash() {
cat << _EOF_
################################################################################
# (Cero3 Shaper)
#   Copyright (C) 2012-2019
#       Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#       Eric Luehrsen
#
################################################################################
#
#   Copyright (C) 2017-2018 Tony Ambardar
#
################################################################################
#
# Revised & adapted:
#
# ancistrus
#
# Netgear's D7000 (V1) Nighthawk Router Experience Distributed Project
#
# https://github.com/negan07/ancistrus
#
# License: GPLv2
#
#
_EOF_
}

usage() {
echo "Usage: $0 < start restart startforced restartforced stop details stats reset help > (< debug >) (< verbose >)"
}

help_guide() {
cat << _EOF_

Settings
There are many settings, but the main are generally the most important to know and to be modified for best usage.

Main settings

qos_enable
Options available
'0': disable qos
'1': enable qos
(Default: 0).

qos_uplink_rate
Real upload bandwidth (no bearer, no max): it can be discovered with 'speedtest'
or with network-test package 'betterspeedtest.sh' script.
It is the most important parameter, bad setting may bring to qos failure.
Setup to 0 to disable qos uplink capability.
(Default: 512).

qos_rate_unit
Upload rate unit. Note that according to pure SI-prefix notation Mbps=1000*Kbps.
Options available
'Kbps': kilobits per second.
'Mbps': megabits per second.
(Default: Kbps).

qos_dwlink_rate
Real download bandwidth: as before.
(Default: 0=download qos disabled).

qos_rate_unit_dw
Download rate unit. Note that according to pure SI-prefix notation Mbps=1000*Kbps.
Options available
'Kbps': kilobits per second.
'Mbps': megabits per second.
(Default: Kbps).

qos_llayer
Link layer adaptation: wan connection proper overheads calculation.
Options available
'ptm': VDSL connections.
'ethernet': True ethernet connections (link, cable).
'atm': ADSL connections.
'none': FTTH fiber, direct LAN or other connections.
(Default: none).

qos_framecompprof
Frame compensation profile settings.
Choose the wan connection type related profile for the next link layer related settings: 
qos_overhead, qos_stab_mtu, qos_stab_tsize, qos_stab_mpu .
This setting is related to web GUI configuration panel only.
Note that the available profiles are strictly related to the link layer adaptation value (qos_llayer).
If the profile is unknown or the related settings are different due to ISP tunings & adaptations,
select: personal (own) and setup the next link layer related settings manually.
(Default: own).

qos_overhead
Per-packet size overhead: can be negative and ISP dependent. Range possibile is [ -64 - 256 ].
This setting may depend from the wan connection type and from the ISP.
Typical values
ptm link layer: 30 bytes on pppoe-ptm, 22 bytes on bridged-ptm.
ethernet link layer: 38 bytes on ethernet link, 18 on cable link.
atm link layer: values may vary depending on wan atm connection type;
better tuning may be done with atm overhead detector script.
For none link layer this setting is not active.
(Default: 0).

qos_stab_mtu
Max packet size creating size table for (bytes).
For ptm, ethernet and atm link layer value must be >= (wan_mtu + qos_overhead) .
For none link layer this setting is not active.
(Default: 2047).

qos_stab_tsize
Number of entries in size/rates table (slots).
For ptm & ethernet link layer use the default value.
For atm link layer value is (qos_stab_mtu + 1) / 16 (typically 128) .
For none link layer this setting is not active.
(Default: 512).

qos_stab_mpu
Min packet size used (bytes). Range possibile is [ 0 - 256 ].
For ptm link layer value must be > 0 (64 is recommended).
For ethernet link layer value must be > 0 (64 is recommended for link ethernet and 84 for cable ethernet).
For atm link layer generally not required (0) with exceptions depending from ISP.
For none link layer this setting is not active.
(Default: 0).

qos_disc
The qos disc sched algorithm used: note that the related sched disc algorithm must be available on router.
Options available
'fq_codel': is the recommended for most usage.
'sfq': the old algorithm used by 36_42n firmware.
(Default: fq_codel).

qos_shaper
The qos shaper sched algorithm used: note that the related shaper sched algorithm must be available on router. 
Options available
'htb': is the recommended for most usage.
'hfsc': best combined with sfq qdisc, but unavailable with fq_codel qdisc due to possible incompatibilities.
'tbf': one of the simplest algos. This shaper is classless (no _DSCP_ settings available).
(Default: htb).

qos_dserv_egress
Egress prioritization scheme.
Options available
For htb, hfsc shapers:
'shaper': acting as a shaper (only).
'classful': use of priority tiers.
'diffserv3': priority scheme is supported.
For tbf shaper value can only be: 'shaper' (setting will be adjusted automatically at runtime).
(Default: diffserv3).

qos_dserv_ingress
Ingress prioritization scheme.
Options available
For htb, hfsc shapers:
'shaper': acting as a shaper (only).
'classful': use of priority tiers.
'diffserv3': priority scheme is supported.
For tbf shaper value can only be: 'shaper' (setting will be adjusted automatically at runtime).
(Default: diffserv3).

qos_ignore_dscp_egress
Note that DSCP filtering can be performed with diffserv prioritization scheme only (htb, hfsc shapers).
Options available
'1': do not perform DSCP based filtering on egress (1-tier classification).
'0': perform DSCP based filtering on egress (n-tier classification).
(Default: 0).

qos_ignore_dscp_ingress
Note that DSCP filtering can be performed with diffserv prioritization scheme only (htb, hfsc shapers).
Options available
'1': do not perform DSCP based filtering on ingress (1-tier classification).
'0': perform DSCP based filtering on ingress (n-tier classification).
(Default: 1).

qos_eecn
Egress Explicit Congestion Notification.
It's recommended to set ECN on high uplink rates (VDSL or ethernet connections) and NOECN on low uplink rates (ADSL connections).
Note that this option is not available in conjunction with classless shapers (sfq).
Options available
'ECN': egress ECN on.
'NOECN': egress ECN off.
(Default: NOECN).

qos_iecn
Ingress Explicit Congestion Notification.
It's recommended to set ECN to notify congestions to local hosts before starting to drop packets.
Note that this option is not available in conjunction with classless shapers (sfq).
Options available
'ECN': ingress ECN on.
'NOECN': ingress ECN off.
(Default: ECN).

qos_script
Use a personal qos script instead of builtin.
Scripts must have .sqm extension and must have compatible content.
Note that old legacy scripts: 'simple.qos', 'simplest.qos', 'simplest_tbf.qos' are embedded now.
(Default: void).

Other settings
Default values should commonly satisfy: change them only if you know what to do.
Consider that ingress=download, egress=upload.

qos_llam
Link layer adjustment method.
Options available
'htb_private': htb fixed table size of 256.
'tc_stab': generic size table manipulations.
(Default: default=tc_stab).

qos_autoflow
Options available
'1': limit the number of flows.
'0': the default of 1024 will be used for all Xfq_codel qdiscs.
(Default: 0).

qos_ipt_mask
Iptables mask. To disable: set mask to '0xffffffff'.
(Default: 0xff).

qos_limit
Global queue size hard limit.
(Default: 1001).

qos_elimit
Egress queue size limit.
(Default: void).

qos_ilimit
Ingress queue size limit.
(Default: void).

qos_etarget
Egress minimum queue delay target.
(Default: void).

qos_itarget
Ingress minimum queue delay target.
(Default: void).

qos_codel_target
Used in conjunction with fq_codel disc only: target of 5ms is good for fast links, in the worst cases it depends from
dw bandwidth and it is recalculated.
(Default: 5ms).

qos_eshaper_burst_dur
Setup the egress shaper burst duration (us) to leap over CPU interrupts when the CPU is severly loaded.
Setting this value to 0, in conjunction with htb, allows default burst of the ATM/AAL5 expanded mtu packet with overhead.
(Default: 1000).

qos_ishaper_burst_dur
Setup the ingress shaper burst duration (us) to leap over CPU interrupts when the CPU is severly loaded.
Setting this value to 0, in conjunction with htb, allows default burst of the ATM/AAL5 expanded mtu packet with overhead.
(Default: 1000).

qos_eshaper_quantum_dur
Setup the egress shaper quantum duration (us).
This checks how many bytes htb tries to deque from the current tier before switching to the next to lower CPU cost.
In first approximation this value should be <= qos_eshaper_burst_dur.
(Default: 1000).

qos_ishaper_quantum_dur
Setup the ingress shaper quantum duration (us).
This checks how many bytes htb tries to deque from the current tier before switching to the next to lower CPU cost.
In first approximation this value should be <= qos_ishaper_burst_dur.
(Default: 1000).

qos_edisc_opts
Other defined egress qdisc options.
(Default: void).

qos_idisc_opts
Other defined ingress qdisc options.
(Default: void).

qos_zero_dscp_egress
Legacy option to mantain retrocompatibility with old configs.
Options available
'1': squashing differentiated services code points (DSCP) on egress.
'0': keeping differentiated services code points (DSCP) on egress.
(Default: 1).

qos_zero_dscp_ingress
Legacy option to mantain retrocompatibility with old configs.
Options available
'1': squashing differentiated services code points (DSCP) from ingress.
'0': keeping differentiated services code points (DSCP) from ingress.
(Default: 1).

How to setup
All settings can be setup at once with: 
'anc nvram set qos_enable 1 qos_uplink_rate 400 qos_dwlink_rate 15000 ... VARN VALN' .
Finally, settings must be stored permanently with: 
'anc nvram commit' or 'nvram commit' .
They can also be setup singularly with: 
'anc nvram set qos_enable 1'
'anc nvram set qos_uplink_rate 400'
'anc nvram set qos_dwlink_rate 15000'
...
'anc nvram set VARN VALN'
'anc nvram commit' .
To empty a setting, reverting it to its default value, type:
'anc nvram set VARN "" '
'anc nvram commit' .
Or as well, to remove a setting completely, reverting it to its default value, type:
'anc nvram unset VARN'
'anc nvram commit' .

Reload then qos-sqm by typing: 'rc qos restart' .

If you wanna look for previously stored value, type: 
'anc nvram get qos_enable qos_uplink_rate qos_dwlink_rate ... VARN' .
Or singularly with: 
'anc nvram get qos_enable'
'anc nvram get qos_uplink_rate'
'anc nvram get qos_dwlink_rate'
...
'anc nvram get VARN' .
_EOF_
}

# DEBUG
[ "$2" = "debug" ] && SQM_DEBUG=1
[ "$3" = "verbose" ] && SQM_VERBOSITY_MAX=8

# PATH
path_binaries

# SETTINGS
get_settings

# LOG
logging_setup

# SQM FUNCTIONS
. ${SCRIPTSDIR}/functions.qos
. ${SCRIPTSDIR}/qdisc_funcs.qos
. ${SCRIPTSDIR}/qos_funcs.qos
. ${SCRIPTSDIR}/legacy_funcs.qos

# LOCKING
run_lock

    case $1 in
    start|restart)
    stop_sqm
    [ "${QOS_ENABLE}" != "0" ] && start_sqm
    ;;
    startforced|restartforced)
    stop_sqm
    start_sqm
    ;;
    stop)
    stop_sqm
    ;;
    details)
    show_sqm
    ;;
    stats)
    show_sqm stats
    ;;
    reset)
    reset
    ;;
    -v|-V|-h|-H|--help|help)
    splash
    usage
    help_guide
    ;;
    *)
    usage && exit 1
    ;;
    esac

